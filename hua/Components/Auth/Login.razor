@page "/login"
@using hua.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations;
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ILogger<Login> Logger

<PageTitle>Login</PageTitle>

<h1 class="mb-3">Login</h1>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
    <DataAnnotationsValidator />

    <div class="mb-3 w-50">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
        <ValidationMessage For="() => loginModel.Email" />
    </div>

    <div class="mb-3 w-50">
        <label for="password" class="form-label">Password</label><a @onclick="()=>{RequestPasswordReset();}" class="small ms-2"><i>Forgot Password?</i></a>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="() => loginModel.Password" />
    </div>

    <button class="btn btn-primary me-2" type="submit">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="ms-2">Logging in...</span>
        }
        else
        {
            <span>Login</span>
        }
    </button>
    <span class="text-muted">Don't have an account? <a href="signup">Sign Up</a></span>

</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}
@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private bool isResetting = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            Logger.LogInformation("Attempting login for email: {Email}", loginModel.Email);
            
            var user = await AuthService.Login(loginModel.Email, loginModel.Password);
            
            // Cast to CustomAuthStateProvider to use the custom method
            if (AuthStateProvider is CustomAuthStateProvider customProvider)
            {
                await customProvider.NotifyUserAuthenticationAsync(
                    user.Email, 
                    user.Id.ToString(), 
                    user.Name,
                    user.Role
                );
            }

            Logger.LogInformation("Login successful for user: {Email}", loginModel.Email);
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Login failed for email: {Email}", loginModel.Email);
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }
        
        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }

    private async Task RequestPasswordReset()
    {
        if (string.IsNullOrEmpty(loginModel.Email))
        {
            errorMessage = "Please enter your email address first";
            return;
        }

        isResetting = true;
        errorMessage = string.Empty;

        try
        {
            var result = await AuthService.RequestPasswordResetAsync(loginModel.Email);
            
            if (result)
            {
                errorMessage = "If an account with that email exists, a password reset link has been sent.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isResetting = false;
        }
    }
}