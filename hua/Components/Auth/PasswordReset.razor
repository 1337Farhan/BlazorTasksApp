@page "/password-reset/{token}"
@using hua.Services
@using System.ComponentModel.DataAnnotations
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Reset Password</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title mb-0">Reset Your Password</h3>
            </div>
            <div class="card-body">
                @if (isLoading)
                {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Verifying reset token...</p>
                    </div>
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">
                        @errorMessage
                    </div>
                    <div class="text-center">
                        <a href="login" class="btn btn-secondary">Request New Reset Link</a>
                    </div>
                }
                else if (isTokenValid)
                {
                    <EditForm Model="PasswordResetModel" OnValidSubmit="HandlePasswordReset">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="newPassword" class="form-label">New Password</label>
                            <InputText id="newPassword" type="password" class="form-control" 
                                      @bind-Value="PasswordResetModel.NewPassword" />
                            <ValidationMessage For="() => PasswordResetModel.NewPassword" />
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm New Password</label>
                            <InputText id="confirmPassword" type="password" class="form-control" 
                                      @bind-Value="PasswordResetModel.ConfirmPassword" />
                            <ValidationMessage For="() => PasswordResetModel.ConfirmPassword" />
                        </div>

                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success mt-3">
                                @successMessage
                            </div>
                        }

                        <button class="btn btn-primary w-100" type="submit" disabled="@isResetting">
                            @if (isResetting)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="ms-2">Resetting Password...</span>
                            }
                            else
                            {
                                <span>Reset Password</span>
                            }
                        </button>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Token { get; set; } = string.Empty;

    private PasswordResetRequest PasswordResetModel = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = true;
    private bool isResetting = false;
    private bool isTokenValid = false;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Token))
        {
            errorMessage = "Invalid reset link. Please request a new password reset.";
            isLoading = false;
            return;
        }

        try
        {
            isTokenValid = await AuthService.VerifyPasswordResetTokenAsync(Token);
            if (!isTokenValid)
            {
                errorMessage = "This password reset link is invalid or has expired. Please request a new one.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error verifying reset token: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandlePasswordReset()
    {
        isResetting = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        // Manual validation for password match
        if (PasswordResetModel.NewPassword != PasswordResetModel.ConfirmPassword)
        {
            errorMessage = "Passwords do not match";
            isResetting = false;
            return;
        }

        try
        {
            var result = await AuthService.ResetPasswordAsync(Token, PasswordResetModel.NewPassword);
            
            if (result)
            {
                successMessage = "Password reset successfully! You can now login with your new password.";
                
                // Redirect to login after delay
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = "Failed to reset password. The reset link may have expired. Please request a new one.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isResetting = false;
        }
    }

    public class PasswordResetRequest
    {
        [Required(ErrorMessage = "New password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your password")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}